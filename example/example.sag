```
hello
```


val mut z = 3
fun f1(x: number, y: number): number {
    z = 2
    return x + y + z
}

print(f1(1, 2))
|1, 2| -> f1 -> print

struct Point {
  x: number,
  y: number
}

impl Point {
  fun move(self, dx: number, dy: number) {
      self.x = self.x + dx
      self.y = self.y + dy
  }
}

impl Point {
  fun display(self) {
      print("hello")
  }
}

val x = 8
val y = 3
val mut point = Point{x: x, y: y}
point.x = 1
point -> print
point.display()

if (x == 8) {
    print("hello2")
    2
} else {
    print("hello")
    1
}

1 - 1
1 + 1
1 / 1
1 * 1

fun fibo(n: number): number {
    return if (n < 2) {
        return n
    } else {
        return fibo(n - 1) + fibo(n - 2)
    }
}


print(fibo(7))

val mut result:Result<number, string> = Suc(1)
result -> print
val match_result = match (result) {
  Suc(v) => {return v + 1}
  Fail(_) => {return 0}
}
match_result -> print
result = Fail("fail")
result -> print
val match_result = match (result) {
  Suc(v) => {return v + 1}
  Fail(_) => {return 0}
}
match_result -> print


val mut option:Option<number> = Some(1)
option -> print
val match_option = match (option) {
  Some(v) => {return v + 1}
  None => {return 0}
}
match_option -> print
option = None
option -> print

val match_option = match (option) {
  Some(v) => {return v + 1}
  None => {return 0}
}
match_option -> print


fun divide(a: number, b: number): Result<number, string> {
    return if (b == 0) {
        return Fail("division by zero")
    } else {
    	return Suc(a / b)
    }
}
divide(1, 2)
